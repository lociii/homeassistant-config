<<: !include .defaults.yaml

esphome:
  name: ${name}
  platform: ESP8266
  board: esp01_1m
  on_shutdown:
    then:
      - globals.set:
          id: cover_position
          value: id(${name}_cover).position
  on_boot:
    then:
      - lambda: id(${name}_cover).publish_state(id(cover_position));
      - binary_sensor.template.publish:
          id: "${name}_endstop_binary_sensor_up"
          state: OFF
      - binary_sensor.template.publish:
          id: "${name}_endstop_binary_sensor_down"
          state: OFF

i2c:
  sda: GPIO12
  scl: GPIO14
  scan: False

globals:
  - id: cover_position
    type: int
    restore_value: yes

sensor:
  # uptime sensor
  - platform: uptime
    name: "${name} uptime"
    unit_of_measurement: days
    filters:
      - lambda: return x / 60 / 60 / 24;
  # wifi signal sensor
  - platform: wifi_signal
    name: "${name} wifi signal"
    filters:
      - or:
        - heartbeat: 1h
        - delta: 3

  # power measurement
  - platform: ade7953
    address: 0x38
    update_interval: 1s
    voltage:
      name: "${name} voltage"
      filters:
        - throttle: ${update_throttle}
    current_a:
      name: "${name} current A"
      filters:
        - lambda: if (x < 0.1) return 0; else return (x);
        - or:
          - throttle: ${update_throttle}
          - delta: 0.03
    current_b:
      name: "${name} current B"
      filters:
        - lambda: if (x < 0.1) return 0; else return (x);
        - or:
          - throttle: ${update_throttle}
          - delta: 0.03
    active_power_a:
      id: "${name}_power_usage_a"
      name: "${name} power A"
      unit_of_measurement: W
      icon: mdi:flash-circle
      accuracy_decimals: 0
      filters:
        - or:
          - throttle: ${update_throttle}
          - delta: 1
      on_value:
        then:
          - if:
              condition:
                lambda: 'return id(${name}_power_usage_a).state > ${cover_moving};'
              then:
                - logger.log:
                    format: "Cover is moving ${switch_a}"
                    level: INFO
          - if:
              condition:
                - lambda: 'return ${cover_stopping} < id(${name}_power_usage_a).state;'
                - lambda: 'return id(${name}_power_usage_a).state < ${cover_moving};'
              then:
                - logger.log:
                    format: "Cover has reached the ${switch_a}wards endposition"
                    level: INFO
                - delay: ${stop_delay}
                - binary_sensor.template.publish:
                    id: "${name}_endstop_binary_sensor_${switch_a}"
                    state: ON
    active_power_b:
      id: "${name}_power_usage_b"
      name: "${name} power B"
      unit_of_measurement: W
      icon: mdi:flash-circle
      accuracy_decimals: 0
      filters:
        - multiply: -1
        - or:
          - throttle: ${update_throttle}
          - delta: 1
      on_value:
        then:
          - if:
              condition:
                lambda: 'return id(${name}_power_usage_b).state > ${cover_moving};'
              then:
                - logger.log:
                    format: "Cover is moving ${switch_b}"
                    level: INFO
          - if:
              condition:
                - lambda: 'return ${cover_stopping} < id(${name}_power_usage_b).state;'
                - lambda: 'return id(${name}_power_usage_b).state < ${cover_moving};'
              then:
                - logger.log:
                    format: "Cover has reached the ${switch_b}wards endposition"
                    level: INFO
                - delay: ${stop_delay}
                - binary_sensor.template.publish:
                    id: "${name}_endstop_binary_sensor_${switch_b}"
                    state: ON

  # device temperature
  - platform: ntc
    sensor: "${name}_resistance_reading"
    id: "${name}_temperature"
    name: "${name} temperature"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
  - platform: resistance
    id: "${name}_resistance_reading"
    sensor: "${name}_analog_reading"
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: "${name}_analog_reading"
    pin: A0

binary_sensor:
  # device status sensor
  - platform: status
    name: "${name}_status"
  # binary sensor for the button A press
  - platform: gpio
    name: "${name} sensor A"
    pin:
      number: GPIO13
      inverted: false
    on_press:
      then:
        - switch.toggle: "${name}_cover_${sensor_a}"
        - binary_sensor.template.publish:
            id: "${name}_endstop_binary_sensor_up"
            state: OFF
        - binary_sensor.template.publish:
            id: "${name}_endstop_binary_sensor_down"
            state: OFF
  # binary sensor for the button B press
  - platform: gpio
    name: "${name} sensor B"
    pin:
      number: GPIO5
      inverted: false
    on_press:
      then:
        - switch.toggle: "${name}_cover_${sensor_b}"
        - binary_sensor.template.publish:
            id: "${name}_endstop_binary_sensor_up"
            state: OFF
        - binary_sensor.template.publish:
            id: "${name}_endstop_binary_sensor_down"
            state: OFF
  # endstop sensors
  - platform: template
    id: "${name}_endstop_binary_sensor_up"
    name: "${name} up endstop"
  - platform: template
    id: "${name}_endstop_binary_sensor_down"
    name: "${name} down endstop"

switch:
  - platform: restart
    name: ${name} Restart
  - platform: gpio
    id: "${name}_cover_${switch_a}"
    name: "${name} cover ${switch_a}"
    pin:
      number: GPIO15
    interlock: &interlock ["${name}_cover_up", "${name}_cover_down"]
    interlock_wait_time: ${interlock_wait}
  - platform: gpio
    id: "${name}_cover_${switch_b}"
    name: "${name} cover ${switch_b}"
    pin:
      number: GPIO4
    interlock: *interlock
    interlock_wait_time: ${interlock_wait}

cover:
  - platform: endstop
    name: "${name} cover"
    id: "${name}_cover"
    max_duration: ${max_duration}

    open_action:
      - switch.turn_on: "${name}_cover_up"
      - binary_sensor.template.publish:
          id: "${name}_endstop_binary_sensor_up"
          state: OFF
      - binary_sensor.template.publish:
          id: "${name}_endstop_binary_sensor_down"
          state: OFF
    open_duration: ${open_duration}
    open_endstop: "${name}_endstop_binary_sensor_up"

    close_action:
      - switch.turn_on: "${name}_cover_down"
      - binary_sensor.template.publish:
          id: "${name}_endstop_binary_sensor_up"
          state: OFF
      - binary_sensor.template.publish:
          id: "${name}_endstop_binary_sensor_down"
          state: OFF
    close_duration: ${close_duration}
    close_endstop: "${name}_endstop_binary_sensor_down"

    stop_action:
      - switch.turn_off: "${name}_cover_up"
      - switch.turn_off: "${name}_cover_down"
