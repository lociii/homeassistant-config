<<: !include _defaults.yaml

# see https://templates.blakadder.com/gosund_SP111.html
# translation https://tasmota.github.io/docs/Components/

# Pin       v1.0        v1.1        v1.4
# GPIO00	  Led1i       Led1i       Led2i
# GPIO01	  None        None        User
# GPIO02	  Led2i       LedLinki    Led1i
# GPIO03	  None        None        User
# GPIO04	  None        HLWBL CF1   None
# GPIO05	  BL0937 CF   BL0937 CF   BL0937 CF
# GPIO09	  None        None        None
# GPIO10	  None        None        None
# GPIO12	  HLWBL SELi  HLWBL SELi  HLWBL SELi
# GPIO13	  Button1     Button1     Button1
# GPIO14	  HLWBL CF1   None        HLWBL CF1
# GPIO15	  Relay1      Relay1      Relay1
# GPIO16	  None        None        None
# FLAG	    None        None        None

esphome:
  name: ${name}
  platform: ESP8266
  board: esp8285

sensor:
  # uptime sensor
  - platform: uptime
    name: "${name}_uptime"
  # wifi signal sensor
  - platform: wifi_signal
    name: "${name}_wifi_signal"
    update_interval: 30s
  # power sensor
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO05
    cf1_pin: GPIO14
    change_mode_every: 3
    update_interval: 3s
    # current sensor
    current:
      name: "${name}_current"
      unit_of_measurement: A
      accuracy_decimals: 3
      filters:
        # map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.013
            - 0.08208 -> 0.071
            - 1.34223 -> 1.066
            - 5.57170 -> 4.408
            - 6.69184 -> 5.259
            - 6.97187 -> 5.540
        # make everything below 0.01A appear as just 0A
        # furthermore it corrects 0.013A for the power usage of the plug
        - lambda: if (x < (0.01 - 0.013)) return 0; else return (x - 0.013);
    # voltage sensor
    voltage:
      name: "${name}_voltage"
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        # map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.0
            - 602.87506 -> 229.9
            - 609.8 -> 232.8
    # power sensor
    power:
      id: "${name}_power"
      name: "${name}_power"
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        # map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 1.14
            - 62.06167 -> 10.93
            - 1503.27161 -> 247.6
            - 1599.81213 -> 263.7
            - 3923.67700 -> 631.4
            - 7109.50928 -> 1148.0
            - 7237.0857 -> 1193.0
            - 7426.71338 -> 1217.0
        # make everything below 2W appear as just 0W
        # furthermore it corrects 1.14W for the power usage of the plug
        - lambda: if (x < (2 + 1.14)) return 0; else return (x - 1.14);
  # total daily energy sensor
  - platform: total_daily_energy
    name: "${name}_daily_energy"
    power_id: "${name}_power"
    filters:
      # multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

binary_sensor:
  # binary sensor for the button press
  - platform: gpio
    name: "${name}_button"
    pin:
      number: GPIO13
      inverted: true
    on_press:
      - switch.toggle: "${name}_relay"

switch:
  # switch to restart the plug
  - platform: restart
    name: "${name}_restart"
  # switch to toggle the relay
  - platform: gpio
    id: "${name}_relay"
    name: "${name}_switch"
    pin: GPIO15
    restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - light.turn_on: "${name}_led"
    on_turn_off:
      - light.turn_off: "${name}_led"

output:
  # relay state led
  - platform: esp8266_pwm
    id: "${name}_state_led"
    pin:
      number: GPIO02
      inverted: true

light:
  # relay state light
  - platform: monochromatic
    output: "${name}_state_led"
    id: "${name}_led"

# uses the red led as a status indicator
status_led:
  pin:
    number: GPIO00
    inverted: true
