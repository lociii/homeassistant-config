version: '3.7'

services:
  # https://hub.docker.com/_/traefik
  traefik:
    hostname: traefik
    image: traefik:2.0
    container_name: traefik
    restart: always
    volumes:
      - ${PWD}/traefik/traefik.toml:/etc/traefik/traefik.toml:ro
      - ${PWD}/traefik/conf.d:/etc/traefik/conf.d:ro
      - ${PWD}/traefik/acme/acme.json:/etc/traefik/acme.json
      - ${PWD}/traefik/shared:/shared
      - ${PWD}/traefik/log:/var/log
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
     - "80:80"
     - "443:443"
     - "8080:8080"

  # https://hub.docker.com/r/library/eclipse-mosquitto
  mosquitto:
    container_name: mosquitto
    restart: unless-stopped
    image: eclipse-mosquitto:1.6.4
    volumes:
      - ${PWD}/mosquitto/passwd:/mosquitto/passwd
      - ${PWD}/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_log:/mosquitto/log
      - mosquitto_data:/mosquitto/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 1883:1883

  # https://hub.docker.com/r/mdillon/postgis
  postgresql:
    container_name: postgresql
    restart: unless-stopped
    image: mdillon/postgis:9.6-alpine
    user: postgres
    environment:
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASS=$POSTGRES_PASS
      - POSTGRES_DB=$POSTGRES_DB
    volumes:
      - postgresql:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro

  # https://hub.docker.com/r/library/influxdb
  influxdb:
    container_name: influxdb
    restart: unless-stopped
    image: influxdb:1.7.7-alpine
    volumes:
      - ${PWD}/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - influxdb:/var/lib/influxdb
    environment:
      - INFLUX_GRAPHITE_ENABLED='true'
      - INFLUXDB_USER=$INFLUXDB_USER
      - INFLUXDB_USER_PASSWORD=$INFLUXDB_PASS

  # https://hub.docker.com/r/grafana/grafana
  grafana:
    container_name: grafana
    restart: unless-stopped
    image: grafana/grafana:6.3.3
    depends_on:
      - influxdb
    volumes:
      - grafana:/var/lib/grafana
    ports:
      - "3000:3000"

  # https://hub.docker.com/r/library/chronograf
  chronograf:
    container_name: chronograf
    restart: unless-stopped
    image: chronograf:1.7.12
    depends_on:
      - influxdb
    volumes:
      - chronograf:/var/lib/chronograf
    ports:
      - "8888:8888"

  # https://hub.docker.com/r/homeassistant/home-assistant
  homeassistant:
    container_name: homeassistant
    restart: unless-stopped
    image: homeassistant/home-assistant:0.97.2
    depends_on:
      - influxdb
      - postgresql
    volumes:
      - ${PWD}/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - homeassistant_media:/media
      - /var/run/docker.sock:/var/run/docker.sock
    tmpfs:
      - /tmp
    labels:
      - "traefik.enable=true"

      - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"

      - "traefik.http.routers.homeassistant_https.rule=Host(`$DOMAIN`)"
      - "traefik.http.routers.homeassistant_https.entrypoints=https"
      - "traefik.http.routers.homeassistant_https.service=homeassistant"
      - "traefik.http.routers.homeassistant_https.tls.certresolver=letsencrypt"

  # https://hub.docker.com/r/acockburn/appdaemon
  appdaemon:
    container_name: appdaemon
    restart: unless-stopped
    image: acockburn/appdaemon:3.0.5
    depends_on:
      - homeassistant
    volumes:
      - ${PWD}/appdaemon:/conf
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - homeassistant

  ################################
  # TRACCAR
  ################################

  # https://hub.docker.com/_/mariadb
  traccar_db:
    container_name: traccar_db
    image: mariadb:10.4.7
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=$TRACCAR_DB_ROOT_PASSWORD
      - MYSQL_DATABASE=traccar
      - MYSQL_USER=traccar
      - MYSQL_PASSWORD=traccar
    volumes:
     - traccar_db:/var/lib/mysql

  # https://hub.docker.com/r/traccar/traccar
  traccar:
    container_name: traccar
    image: traccar/traccar:4.5-alpine
    restart: unless-stopped
    depends_on:
      - traccar_db
    volumes:
      - ${PWD}/traccar/traccar.xml:/opt/traccar/conf/traccar.xml:ro
      - traccar_logs:/opt/traccar/logs:rw
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    labels:
      - "traefik.enable=true"

      - "traefik.http.services.traccar.loadbalancer.server.port=8082"

      - "traefik.http.routers.traccar_https.rule=Host(`traccar.$DOMAIN`)"
      - "traefik.http.routers.traccar_https.entrypoints=https"
      - "traefik.http.routers.traccar_https.service=traccar"
      - "traefik.http.routers.traccar_https.tls.certresolver=letsencrypt"

      - "traefik.http.services.traccar_client.loadbalancer.server.port=5055"

      - "traefik.http.routers.traccar_client.rule=Host(`client.traccar.$DOMAIN`)"
      - "traefik.http.routers.traccar_client.entrypoints=https"
      - "traefik.http.routers.traccar_client.service=traccar_client"
      - "traefik.http.routers.traccar_client.tls.certresolver=letsencrypt"

  ################################
  # PAPERLESS
  ################################

  # ftp server for paperless consumer
  # https://hub.docker.com/r/fauria/vsftpd
  ftp:
    container_name: ftp
    image: fauria/vsftpd:latest
    restart: unless-stopped
    ports:
      - "20:20"
      - "21:21"
    environment:
      - FTP_USER=ftp
      - FTP_PASS=$FTP_PASSWORD
      - PASV_ENABLE=NO
      - FILE_OPEN_MODE=0666
      - LOCAL_UMASK=0111
    volumes:
      - ${PWD}/ftp_data:/home/vsftpd:rw
      - /etc/localtime:/etc/localtime:ro

  # https://hub.docker.com/r/danielquinn/paperless
  paperless_webserver:
    container_name: paperless_webserver
    image: danielquinn/paperless:latest
    restart: unless-stopped
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
      # You have to adapt the local path you want the consumption
      # directory to mount to by modifying the part before the ':'.
      - ${PWD}/ftp_data/ftp:/consume
    # The reason the line is here is so that the webserver that doesn't do
    # any text recognition and doesn't have to install unnecessary
    # languages the user might have set in the env-file by overwriting the
    # value with nothing.
    environment:
      - PAPERLESS_OCR_LANGUAGES=
      - PAPERLESS_PASSPHRASE=$PAPERLESS_PASSPHRASE
    command: ["runserver", "--insecure", "--noreload", "0.0.0.0:8000"]
    labels:
      - "traefik.enable=true"

      - "traefik.http.services.paperless.loadbalancer.server.port=8000"

      - "traefik.http.routers.paperless_https.rule=Host(`paperless.$DOMAIN`)"
      - "traefik.http.routers.paperless_https.entrypoints=https"
      - "traefik.http.routers.paperless_https.service=paperless"
      - "traefik.http.routers.paperless_https.tls.certresolver=letsencrypt"

  # https://hub.docker.com/r/danielquinn/paperless
  paperless_consumer:
    container_name: paperless_consumer
    image: danielquinn/paperless:latest
    restart: unless-stopped
    depends_on:
      - paperless_webserver
    volumes:
      - paperless_data:/usr/src/paperless/data
      - paperless_media:/usr/src/paperless/media
      # This should be set to the same value as the consume directory
      # in the webserver service above.
      - ${PWD}/ftp_data/ftp:/consume
      # Likewise, you can add a local path to mount a directory for
      # exporting. This is not strictly needed for paperless to
      # function, only if you're exporting your files: uncomment
      # it and fill in a local path if you know you're going to
      # want to export your documents.
      # - /path/to/another/arbitrary/place:/export
    environment:
      # passphrase to gpg encode document for storage
      - PAPERLESS_PASSPHRASE=$PAPERLESS_PASSPHRASE
      # list of languages to be supported for ocr
      - PAPERLESS_OCR_LANGUAGES=$PAPERLESS_OCR_LANGUAGES
      # mail host settings
      - PAPERLESS_CONSUME_MAIL_HOST=$PAPERLESS_CONSUME_MAIL_HOST
      - PAPERLESS_CONSUME_MAIL_PORT=$PAPERLESS_CONSUME_MAIL_PORT
      - PAPERLESS_CONSUME_MAIL_USER=$PAPERLESS_CONSUME_MAIL_USER
      - PAPERLESS_CONSUME_MAIL_PASS=$PAPERLESS_CONSUME_MAIL_PASS
      - PAPERLESS_CONSUME_MAIL_INBOX=$PAPERLESS_CONSUME_MAIL_INBOX
      # secret phrase that must be contained in the email body to allow import
      - PAPERLESS_EMAIL_SECRET=$PAPERLESS_EMAIL_SECRET
      # define how many threads are allowed for ocr
      - PAPERLESS_OCR_THREADS=4
      # accept documents even if the ocr could not detect the language
      - PAPERLESS_FORGIVING_OCR=True
    command: ["document_consumer"]

  ################################
  # VOLUMERIZE (BACKUP)
  ################################
  # touch known_hosts in /root/.ssh/ and run "docker-compose exec backup list" once to add host key verification

  # https://hub.docker.com/r/blacklabelops/volumerize
  backup:
    container_name: backup
    image: blacklabelops/volumerize:1.5.1
    restart: unless-stopped
    environment:
        - TZ=Europe/Berlin
        - VOLUMERIZE_SOURCE=/source
        - VOLUMERIZE_TARGET=$VOLUMERIZE_TARGET
        - VOLUMERIZE_JOBBER_TIME=0 15 0 * * *
        - VOLUMERIZE_FULL_IF_OLDER_THAN=7D
        - VOLUMERIZE_CONTAINERS=traefik chronograf grafana homeassistant influxdb mosquitto paperless_webserver paperless_consumer postgresql traccar traccar_db
        - JOB_NAME2=RemoveOldBackups
        - JOB_COMMAND2=/etc/volumerize/remove-older-than 7D --force
        - JOB_TIME2=0 0 0 * * *
    volumes:
        - chronograf:/source/chronograf:ro
        - grafana:/source/grafana:ro
        - homeassistant_media:/source/homeassistant_media:ro
        - influxdb:/source/influxdb:ro
        - mosquitto_data:/source/mosquitto_data:ro
        - paperless_data:/source/paperless_data:ro
        - paperless_media:/source/paperless_media:ro
        - postgresql:/source/postgresql:ro
        - traccar_db:/source/traccar_db:ro
        - volumerize_cache:/volumerize-cache
        - /var/run/docker.sock:/var/run/docker.sock
        - volumerize_ssh:/root/.ssh/

volumes:
  chronograf: {}
  grafana: {}
  homeassistant_media: {}
  influxdb: {}
  mosquitto_log: {}
  mosquitto_data: {}
  postgresql: {}

  traccar_db: {}
  traccar_logs: {}

  paperless_data: {}
  paperless_media: {}

  volumerize_cache: {}
  volumerize_ssh: {}
